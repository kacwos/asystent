# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# ░╔████╗░░ ░╔██████ ░╔██████ ██╗░░░░╔██ ░╔██████ ███████████ ████████░ ██══╗░░░██ ███████████ #
# ██╔═══██╗ ██╔════╝ ██╔════╝ ░░██╗╔██╔╝ ██╔════╝ ╚═══███╔══╝ ██════╗░░ ████╚═╗░██ ╚═══███╔══╝ #
# ██║░░░██║ ░╚████╗░ ░╚████╗░ ░░░░██╔═╝░ ░╚████╗░ ░░░░███║░░░ ██████║░░ ██╔╗██║░██ ░░░░███║░░░ #
# ████████║ ░░╚══╗██ ░░╚══╗██ ░░░░██║░░░ ░░╚══╗██ ░░░░███║░░░ ██╔═══╝░░ ██║║██║░██ ░░░░███║░░░ #
# ██╔═══██║ ░░░░░║██ ░░░░░║██ ░░░░██║░░░ ░░░░░║██ ░░░░███║░░░ ██╚═════╗ ██║╚═╗████ ░░░░███║░░░ #
# ██║░░░██║ ██████╔╝ ██████╔╝ ░░░░██║░░░ ██████╔╝ ░░░░███║░░░ ████████║ ██║░░╚═╗██ ░░░░███║░░░ #
# ╚═╝░░░╚═╝ ╚═════╝░ ╚═════╝░ ░░░░╚═╝░░░ ╚═════╝░ ░░░░╚══╝░░░ ╚═══════╝ ╚═╝░░░░╚═╝ ░░░░╚══╝░░░ #
 # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

#############################################################################################
# pip instal , SpeechRecognition, pyttsx3, requests, win10toast_persist, wikipedia #
############################################################################################
import speech_recognition as sr
import webbrowser
import pyttsx3
import subprocess
import requests
from win10toast import ToastNotifier
import pyautogui
import time
import wikipedia
import random
import sys
import datetime
import tkinter as tk
from tkinter import messagebox
from mtranslate import translate

av = 0.5
ar = 190

tell_joke_command = [
    'opowiedz dowcip',
    'opowiedz żart',
    'powiedz dowcip',
    'powiedz żart'
]

def date_and_time():
    current_time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    print(f"Aktualna godzina: {current_time}")

def clock():
    def update_clock():
        ora_curenta = time.strftime('%H:%M:%S')
        ceas.config(text=ora_curenta)
        ceas.after(1000, update_clock)

    app = tk.Tk()
    app.title('zegar python')

    ceas = tk.Label(app, text='', font=('Helvetica', 48))
    ceas.pack()

    update_clock()
    app.mainloop()

def translate_text(text, target_language='en'):
    translated_text = translate(' '.join(text[1:]), target_language)
    return translated_text

def assistant():
    global aname
    engine = pyttsx3.init()
    engine.setProperty('volume', av)
    engine.setProperty('rate', ar)
    engine.setProperty('gender', 'male')

    def tell_joke():
        jokes = [
            "Dlaczego komputerowi nigdy nie jest zimno? Bo zawsze ma Windows!",
            "Dlaczego książka nie mogła wejść do baru? Bo miała już za dużo rozdziałów!",
            "Dlaczego psy nie potrafią korzystać z komputera? Bo mają trudność z zatrzaskiwaniem myszy!",
            "Co mówi zegar do drugiego zegara? 'Hej, masz czas?'",
            "Dlaczego krowa nie potrafi grać w gry wideo? Bo zawsze rzuca się na joystick!",
            "Jak nazywa się wiewiórka ninja? Skradająca się!",
            "Dlaczego księżyc nigdy nie śpi? Bo zawsze jest w fazie!",
            "Jak nazywa się nielegalny przekręt marchewkowy? Burak!",
            "Dlaczego nie można ufać schodom? Bo są zawsze pełne podejrzeń!",
            "Jak nazywa się owca, która zna sztuki walki? Baa-rbarian!"
        ]

        joke = random.choice(jokes)
        print("Dowcip dnia:")
        print(joke)
        engine.say(joke)
        engine.runAndWait()

    while True:
        greetings_list = ['cześć', 'hej', 'siema', 'hejo', 'doberek', 'dzień dobry', 'dobry']

        def recognize_speech(message='Powiedz coś'):
            recognizer = sr.Recognizer()

            try:
                with sr.Microphone() as source:
                    print(message)
                    recognizer.adjust_for_ambient_noise(source)
                    audio = recognizer.listen(source, timeout=60)

                recognized_text = recognizer.recognize_google(audio, language='pl-PL')
                print('Powiedziałeś: ' + recognized_text)
                return recognized_text.lower()

            except sr.UnknownValueError:
                print('Nie zrozumiałem, co powiedziałeś!')
            except sr.RequestError as e:
                print("BŁĄD: ", e)
                print("Sprawdź połączenie z internetem.")
            except Exception as e:
                print("Niespodziewany błąd:", e)

        text = recognize_speech()
        word_list = text.split(" ")
        notes = []

        def add_note(note):
            try:
                notes.append(note)
                print('Dodano notatkę:', note)
            except Exception as e:
                print('Nie udało się dodać notatki:', e)

        def read_notes():
            if not notes:
                print('Brak notatek.')
            else:
                print('Twoje notatki:')
                for i, note in enumerate(notes, start=1):
                    print(f'{i}. {note}')
                    engine.say(note)
                    engine.runAndWait()

        if (aname.get().lower() in text and word_list[0] == aname.get().lower()):
            if ("otwórz" in text and word_list[1] == 'otwórz') or ("uruchom" in text and word_list[1] == 'uruchom'):

                if 'przeglądarkę' in text:
                    engine.say('Otwieram przeglądarkę')
                    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
                    # Musisz tu podać ścieżkę przeglądarki z jakiej będziesz korzystać                      #
                    # Ja korzystam z Opery, więc podałem operaGx_path w nazwie ścieżki, ale możesz dać inną #
                    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
                    operaGx_path = r'C:/Users/User/AppData/Local/Programs/Opera GX/launcher.exe'
                    try:
                        subprocess.Popen([operaGx_path, "http://www.google.com"])
                    except Exception as e:
                        print("Błąd uruchamiania przeglądarki:", e)

                elif 'discord' in text:
                    engine.say('Otwieram Discord')
                    webbrowser.open("https://discord.com")

                elif 'spotify' in text:
                    engine.say('Otwieram Spotify')
                    webbrowser.open("https://spotify.com")

                elif 'youtube' in text:
                    engine.say('Otwieram YouTube')
                    webbrowser.open("https://www.youtube.com")
                    if 'tytuł' in text:
                        title = ' '.join(word_list[4:])
                        try:
                            time.sleep(6)
                            pyautogui.click(700, 100)
                            pyautogui.write(title, interval=0.1)
                            pyautogui.press('ENTER')
                        except:
                            print('Coś poszło nie tak')

                elif 'netflix' in text:
                    engine.say('Otwieram Netflix')
                    webbrowser.open("https://www.netflix.com")

                elif 'czat gpt' in text:
                    engine.say('Otwieram chatGPT')
                    webbrowser.open("https://www.chatGPT.com")

                elif 'twitcha' in text:
                    engine.say('Otwieram Twitcha')
                    webbrowser.open("https://www.twitch.com")

                elif 'tiktoka' in text:
                    engine.say('Otwieram TikToka')
                    webbrowser.open("https://www.tiktok.com")

                elif 'replit' in text:
                    engine.say('Otwieram Replita')
                    webbrowser.open("https://www.replit.com")

                elif 'github' in text:
                    engine.say('Otwieram GitHub')
                    webbrowser.open("https://www.github.com")

                else:
                    app_name = ' '.join(word_list[2:])
                    engine.say(f'Otwieram {app_name}')
                    webbrowser.open(f'https://www.{app_name}.com')

        elif 'koniec' in text:
            sys.exit(0)

        elif text == 'jaka jest pogoda':
            with open('api_key.txt', "r") as f:
                api_key = f.read().strip()

            base_url = 'https://api.openweathermap.org/data/2.5/weather?q='
            city = 'Lublin'
            complete_url = f'{base_url}{city}&appid={api_key}'

            try:
                response = requests.get(complete_url)
                response.raise_for_status()

                x = response.json()
                y = x['main']

                temp = y['temp']
                feels_like = y['feels_like']
                pressure = y['pressure']
                humidity = y['humidity']

                toaster = ToastNotifier()
                toaster.show_toast('Pogoda na dziś',
                                   f"Temperatura: {round(temp - 273.15)}°C\n"
                                   f"Odczuwalna temperatura: {round(feels_like - 273.15)}°C\n"
                                   f"Ciśnienie: {pressure}hPa\n"
                                   f"Wilgotność: {humidity}%",
                                   icon_path=None, duration=None)
            except requests.exceptions.HTTPError as errh:
                print("Błąd HTTP:", errh)
            except requests.exceptions.ConnectionError as errc:
                print("Błąd połączenia:", errc)
            except requests.exceptions.Timeout as errt:
                print("Błąd timeout:", errt)
            except requests.exceptions.RequestException as err:
                print("Niespodziewany błąd:", err)

        elif 'artykuł' in text and len(word_list) >= 4 and word_list[0:2] == ['pokaż', 'mi']:
            wikipedia.set_lang('pl')
            phrase = ' '.join(word_list[3:])
            try:
                page = wikipedia.page(phrase)
                webbrowser.open_new_tab(page.url)
            except wikipedia.exceptions.PageError:
                print("Nie znaleziono strony dla podanej frazy.")
            else:
                print("Warunki nie zostały spełnione. Nie można kontynuować.")

        elif greetings_list[0] in text or greetings_list[1] in text or greetings_list[2] in text:
            lp = random.randint(1, 7)

            if lp == 1:
                engine.say(greetings_list[0])
                engine.runAndWait()
            if lp == 2:
                engine.say(greetings_list[1])
                engine.runAndWait()
            if lp == 3:
                engine.say(greetings_list[2])
                engine.runAndWait()
            if lp == 4:
                engine.say(greetings_list[3])
                engine.runAndWait()
            if lp == 5:
                engine.say(greetings_list[4])
                engine.runAndWait()
            if lp == 6:
                engine.say(greetings_list[5])
                engine.runAndWait()
            if lp == 7:
                engine.say(greetings_list[6])
                engine.runAndWait()

        elif 'pisz' in text:
            sentences = ' '.join(word_list[1:])
            try:
                time.sleep(5)
                pyautogui.typewrite(sentences, interval=0.05)
            except Exception as e:
                print('Nie można wykonać czynności. Błąd:', e)

        elif 'licz' in text:
            try:
                expression = ' '.join(word_list[1:])
                result = eval(expression)
                engine.say(f'wynik to {result}')
                engine.runAndWait()
                print(f'wynik to {result}')
            except Exception as e:
                print('Błąd kalkulatora. Spróbuj ponownie. Błąd:', e)

        elif (tell_joke_command[0] in text or
              tell_joke_command[1] in text or
              tell_joke_command[2] in text or
              tell_joke_command[3] in text):
            tell_joke()

        elif 'dodaj notatkę' in text:
            try:
                note = ' '.join(word_list[2:])
                add_note(note)
            except:
                print('Nie udało się zapisać notatki.')

        elif 'odczytaj notatkę' in text:
            read_notes()

        elif 'data i czas' in text:
            date_and_time()

        elif 'zegar' in text:
            clock()

        elif 'tłumacz' in text:
            translated_text = translate_text(word_list, target_language='en')
            print(f"Tłumaczenie: {translated_text}")
            engine.say(translated_text)
            engine.runAndWait()

def end():
    sys.exit(0)

def assistent_function():
    assistant()

def info():
    messagebox.showinfo("Instrukcja", '''
        MOŻLIWOŚCI:\n'
         =>Otwieranie stron w przeglądarce:'
         =>Otwieranie przegladarki (powiedz {aname} otwórz/uruchom przeglądarkę)
         =>Otwieranie TikToka (powiedz {aname} otwórz/uruchom tiktoka)
         =>Otwieranie Netflixa (powiedz {aname} otwórz/uruchom netflix)
         =>Otwieranie youtuba (powiedz {aname} otwórz/uruchom youtube, możesz też dodać "tytuł" i powiedzieć a {aname} wpisze w wyszukiwarce tytuł który powiedziałeś)
         =>Otwieranie githuba (powiedz {aname} otwórz/uruchom github)
         =>Otwieranie replit (powiedz {aname} otwórz/uruchom replit)
         =>Otwieranie spotify (powiedz {aname} otwórz/uruchom spotify)
         =>Otwieranie chatu GPT (powiedz {aname} otwórz/uruchom czat gpt)
         =>Otwieranie discorda (powiedz {aname} otwórz/uruchom discord)
         =>Otwieranie twitcha (powiedz {aname} otwórz/uruchom twitcha)
         =>Otwieranie dowolnej strony (poweidz stronę jaką chcesz otworzyć)
         =>Wyjśćie z programu (powiedz "koniec")
       INNE możliwości:
         =>Witanie się (powiedz siema/hej/cześć a assystent ci odpowie losowo wybranym przywitaniem)
         =>Pogoda (powiedz "jaka jest pogoda" a wtedy w powiadomieniu przyjdzie ci temperatura, odczuwalna temp,
             ciśnienie i wilgotność)
         =>Artykuły z wikipedi (powiedz "pokaż mi artykuł <nazwa artykułu jaki chcesz przeczytać>")
         =>Pisanie z mowy (powiedz "pisz" i to co chcesz żeby assystent napisał a później przejdź do komunikatora i 
           naciśnij na miejsce do wpisywania textu)
        =>Tłumaczenie z mowy (powiedz "tłumacz" i to co chcesz powiedzieć a {aname} ci to przetłumaczy i przeczyta)
        =>Zegar (po powiedzeniu 'zegar' pojawi się okienko z zegarem)
        =>Data i czas (po 'powiedzeniu Data i czas' w terminalu pojawi się dokładny rok, dzień, miesiąc, gadzina, minuta,
            sekunda)
        =>Notatki (po powiedzeniu 'dodaj notatkę' powiedz co chcesz zanotować)
        =>Odczytaj notatke (po powiedzeniu 'odczytaj notatkę' {aname} napisze i odczyta ostatnią notatkę)
        =>Licz (po powiedzeniu 'licz' powiedz działanie jakie chcesz żeby {aname} odczytał)
       INSTRUKCJA:
         =>musisz mówić tak jak jest podane w MOŻLIWOŚCIACH
         =>masz 60 sekund na powiedzenie polecenia dla assystenta
         =>jeżeli assystent nie zrozumie tego co powiedziałeś napisze ci że nie zrozumiał i sie wyłączy 
         =>program moze się ścinać ponieważ ma dużo rzeczy do przetworzenia
         =>to co mówisz i to co ci odpowie assystent wyświetla się w terminalu
    ''')
    time.sleep(30)
    assistent_function()

aapp = tk.Tk()
aapp.title('assystent')

logo = tk.Label(text='''
 ░╔████╗░░ ░╔██████ ░╔██████ ██╗░░░░╔██ ░╔██████ ███████████ ████████░ ██══╗░░░██ ███████████ 
 ██╔═══██╗ ██╔════╝ ██╔════╝ ░░██╗╔██╔╝ ██╔════╝ ╚═══███╔══╝ ██════╗░░ ████╚═╗░██ ╚═══███╔══╝ 
 ██║░░░██║ ░╚████╗░ ░╚████╗░ ░░░░██╔═╝░ ░╚████╗░ ░░░░███║░░░ ██████║░░ ██╔╗██║░██ ░░░░███║░░░ 
 ████████║ ░░╚══╗██ ░░╚══╗██ ░░░░██║░░░ ░░╚══╗██ ░░░░███║░░░ ██╔═══╝░░ ██║║██║░██ ░░░░███║░░░ 
 ██╔═══██║ ░░░░░║██ ░░░░░║██ ░░░░██║░░░ ░░░░░║██ ░░░░███║░░░ ██╚═════╗ ██║╚═╗████ ░░░░███║░░░ 
 ██║░░░██║ ██████╔╝ ██████╔╝ ░░░░██║░░░ ██████╔╝ ░░░░███║░░░ ████████║ ██║░░╚═╗██ ░░░░███║░░░ 
 ╚═╝░░░╚═╝ ╚═════╝░ ╚═════╝░ ░░░░╚═╝░░░ ╚═════╝░ ░░░░╚══╝░░░ ╚═══════╝ ╚═╝░░░░╚═╝ ░░░░╚══╝░░░
''')
logo.pack()

aname = tk.Entry()
aname.pack()

astntb = tk.Button(text='assystent', command=assistent_function())
astntb.pack()

infob = tk.Button(text='informacje/instrukcja', command=info)
infob.pack()

endb = tk.Button(text='koniec', command=end)
endb.pack()

aapp.mainloop()
